// Generated by CoffeeScript 1.4.0
(function() {

  define(['lib/plane', 'mocks', 'gl'], function(Plane, mocks, gl) {
    return describe('Plane', function() {
      var plane;
      plane = {};
      beforeEach(function() {
        var screen;
        plane = mocks.plane();
        return screen = mocks.screen();
      });
      describe("movement", function() {
        it("should sit still if velocity is 0", function() {
          plane.velocity.x = 0;
          plane.position.x = 10;
          plane.move(plane.game.timer);
          return expect(plane.position.x).toBe(10);
        });
        it("should move right when velocity is positive", function() {
          plane.velocity.x = 1;
          plane.position.x = 10;
          plane.move(plane.game.timer);
          return expect(plane.position.x).toBeGreaterThan(10);
        });
        it("should move left when velocity is negative", function() {
          plane.velocity.x = -1;
          plane.position.x = 10;
          plane.move(plane.game.timer);
          return expect(plane.position.x).toBeLessThan(10);
        });
        it("should not move off screen left", function() {
          var screen;
          screen = plane.game.screen;
          plane.velocity.x = -5;
          plane.position.x = 0;
          plane.tick(plane.game.timer, screen.scroll);
          return expect(plane.position.x).toBe(0);
        });
        return it("should not move off screen right", function() {
          var screen;
          screen = plane.game.screen;
          plane.velocity.x = 10;
          plane.position.x = screen.width - plane.width;
          plane.tick(plane.game.timer, screen.scroll);
          return expect(plane.position.x).toBe(screen.width - plane.width);
        });
      });
      return describe("dropping", function() {
        return it("should drop something", function() {
          return expect(plane.drop()).toBeDefined();
        });
      });
    });
  });

}).call(this);
